#!/usr/bin/env python 
#
# Cloudlet Infrastructure for Mobile Computing
#
#   Author: Kiryong Ha <krha@cmu.edu>
#
#   Copyright (C) 2011-2013 Carnegie Mellon University
#   Licensed under the Apache License, Version 2.0 (the "License");
#   you may not use this file except in compliance with the License.
#   You may obtain a copy of the License at
#
#       http://www.apache.org/licenses/LICENSE-2.0
#
#   Unless required by applicable law or agreed to in writing, software
#   distributed under the License is distributed on an "AS IS" BASIS,
#   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
#   See the License for the specific language governing permissions and
#   limitations under the License.
#

import os
import sys
import traceback
from optparse import OptionParser

sys.path.insert(0, "../")
from elijah.provisioning import synthesis as synthesis
from elijah.provisioning.Configuration import Const as Const
from elijah.provisioning.Configuration import Options
from elijah.provisioning import log as logging
from elijah.provisioning.db.table_def import BaseVM
from elijah.provisioning.db.table_def import Session
from elijah.provisioning.db.table_def import OverlayVM
from elijah.provisioning.db.api import DBConnector
from elijah.provisioning.package import PackagingUtil

LOG = logging.getLogger(__name__)

def print_usage(commands):
    usage = "\n%prog command  [option] -- [qemu-options]\n"
    usage += "  EX) cloudlet.py base /path/to/disk.img\n\n"
    usage += "Command list:\n"
    MAX_SPACE = 20
    for (comm, desc) in commands.iteritems():
        space = ""
        if len(comm) < MAX_SPACE: 
            space = " " * (20-len(comm))
        usage += "  %s%s : %s\n" % (comm, space, desc)
    return usage


def get_database():
    dbconn = DBConnector()
    return dbconn


def process_command_line(argv, commands):
    VERSION = 'cloudlet tool: %s' % Const.VERSION
    DESCRIPTION = 'Cloudlet Overlay Generation & Synthesis'

    parser = OptionParser(usage=print_usage(commands), version=VERSION, description=DESCRIPTION)

    parser.add_option(
            '-t', '--no-trim', action='store_true', dest='disable_trim_support', default=False,
            help="This will disable TRIM Support, mainly for test purposes.\n"+
                    "Normal user does not need to care about this option")
    parser.add_option(
            '-m', '--extract-free-memory', action='store_true', dest='enable_free_support', default=False,
            help="This will ENABLE extracting Free memory, mainly for test purposes.\n"+
                    "We disable this feature in default because it requires agency within guest OS.\n"+
                    "Normal user does not need to care about this option.")
    parser.add_option(
            '-d', '--disk', action='store_true', dest='disk_only', default=False,
            help='[overlay_creation] create only disk overlay only')
    parser.add_option(
            '-z', '--zip', action='store_true', dest='zip_container', default=False,
            help='[overlay_creation] encapsulate vm overlay files into a single zip file')
    parser.add_option(
            '-s', '--samba-mount', action='store', dest='source_uri', default=None,
            help='[overlay_creation] mount samba for data-intensive application')
    parser.add_option(
            '-r', '--residue', action='store_true', dest='return_residue', default=False,
            help='[synthesis] return residue after using synthesized VM')
    settings, args = parser.parse_args(argv)

    if len(args) < 1:
        parser.error("Choose command :\n  %s" % " | ".join(commands))
        

    mode = str(args[0]).lower()
    if mode not in commands.keys():
        parser.error("Invalid Command, Choose among :\n  %s" % " | ".join(commands))

    # option for creating residue 
    valid_residue_condition = (mode == "synthesis") or (settings.return_residue != True) 
    if valid_residue_condition == False:
        parser.error("-r (return residue) should be used only with synthesis command")

    # option for samba mount
    valid_samba_mount = (mode == "overlay") or (settings.source_uri == None) 
    if valid_samba_mount == False:
        parser.error("-s (mount samba) should be used only with overlay command")

    return mode, args[1:], settings


def main(argv):
    if not synthesis.validate_congifuration():
        sys.stderr.write("failed to validate configuration\n")
        return 1

    CMD_BASE_CREATION       = "base"
    CMD_OVERLAY_CREATION    = "overlay"
    CMD_SYNTEHSIS           = "synthesis"
    CMD_LIST_BASE           = "list-base"
    CMD_DEL_BASE            = "del-base"
    CMD_ADD_BASE            = "add-base"
    CMD_EXPORT_BASE         = "export-base"
    CMD_IMPORT_BASE         = "import-base"
    CMD_LIST_SESSION        = "list-session"
    CMD_CLEAR_SESSION       = "clear-session"
    CMD_LIST_OVERLAY        = "list-overlay"

    commands = {
            CMD_BASE_CREATION: "create new base VM",
            CMD_OVERLAY_CREATION: "create new overlay VM on top of base VM",
            CMD_SYNTEHSIS: "test created overlay using command line",
            CMD_LIST_BASE: "show all base VM at this machine",
            CMD_ADD_BASE: "add existing base vm to DB",
            CMD_DEL_BASE: "delete base vm at database",
            CMD_EXPORT_BASE: "export base VM into a single file",
            CMD_IMPORT_BASE: "import base VM from a single file",
            CMD_LIST_SESSION: "list all the session history",
            CMD_LIST_OVERLAY: "list all the overlay history",
            }
    mode, left_args, settings = process_command_line(sys.argv[1:], commands)

    if mode == CMD_BASE_CREATION:
        # creat base VM
        if len(left_args) < 1:
            sys.stderr.write("Need path to VM's virtual disk\n")
            sys.stderr.write("Ex) ./cloudlet %s ../image/ubuntu/precise.raw\n" % (CMD_BASE_CREATION))
            return 1
        if len(left_args) > 1 :
            sys.stderr("Warning, qemu argument won't be applied to creating base vm")
        disk_image_path = left_args[0] 
        disk_path, mem_path = synthesis.create_baseVM(disk_image_path)
        print "Base VM is created from %s" % disk_image_path
        print "Disk: %s" % disk_path
        print "Mem: %s" % mem_path
    elif mode == CMD_OVERLAY_CREATION:
        # create overlay
        if len(left_args) < 1:
            sys.stderr.write("Need path to base disk\n")
            sys.stderr.write("Check your base VM list './cloudet %s'\n" % (CMD_LIST_BASE))
            return 1
        disk_image_path = left_args[0] 
        qemu_args = left_args[1:]
        options = Options()
        options.TRIM_SUPPORT = not settings.disable_trim_support
        options.FREE_SUPPORT = settings.enable_free_support
        options.DISK_ONLY = settings.disk_only
        options.ZIP_CONTAINER = settings.zip_container
        options.DATA_SOURCE_URI = settings.source_uri

        try:
            # resume base vm for creating vm overlay
            vm_overlay = synthesis.VM_Overlay(disk_image_path, options, \
                    qemu_args=qemu_args)
            machine = vm_overlay.resume_basevm()
            synthesis.connect_vnc(machine)

            # optimizations
            vm_overlay.create_overlay()

            # print output
            if options.ZIP_CONTAINER == False:
                sys.stdout.write("[INFO] overlay metafile (%ld) : %s\n" % \
                        (os.path.getsize(vm_overlay.overlay_metafile), \
                        vm_overlay.overlay_metafile))
                for overlay_file in vm_overlay.overlay_files:
                    sys.stdout.write("[INFO] overlay (%ld) : %s\n" % \
                            (os.path.getsize(overlay_file), overlay_file))
            else:
                import zipfile
                overlay_zip = zipfile.ZipFile(vm_overlay.overlay_zipfile)
                filesize_count = 0
                for zipinfo in overlay_zip.infolist():
                    if zipinfo.filename == Const.OVERLAY_META:
                        msg = "meta file : (%ld) bytes\n" % \
                                (zipinfo.file_size)
                    else:
                        msg = "blob file : (%ld) bytes (%s)\n" % \
                                (zipinfo.file_size, zipinfo.filename)
                    filesize_count += zipinfo.file_size
                    sys.stdout.write(msg)
                sys.stdout.write("zip overhead : (%ld) bytes\n" % \
                        (os.path.getsize(vm_overlay.overlay_zipfile)-filesize_count))
                sys.stdout.write("overlay file at : %s\n" % vm_overlay.overlay_zipfile)

            # option for data-intensive application
            if options.DATA_SOURCE_URI != None and hasattr(vm_overlay, "overlay_uri_meta"):
                sys.stdout.write("[INFO] overlay URIs : %s\n" % \
                        vm_overlay.overlay_uri_meta)
        except Exception, e:
            LOG.error("%s\nFailed to create overlay" % str(traceback.format_exc()))
            return 1
    elif mode == CMD_SYNTEHSIS:
        if len(left_args) < 2:
            sys.stderr.write("Synthesis requires path to VM disk and overlay-meta\n \
                    Ex) ./cloudlet synthesis [VM disk] /path/to/precise.overlay-meta [options]\n")
            return 1
        disk_image_path = left_args[0] 
        meta = left_args[1]
        qemu_args = left_args[2:]
        try:
            synthesis.synthesis(disk_image_path, meta, \
                                disk_only=settings.disk_only, \
                                return_residue=settings.return_residue, \
                                zip_container=settings.zip_container, \
                                qemu_args=qemu_args)
        except Exception, e:
            LOG.warning(str(e))
            LOG.error("%s\nFailed to synthesize" % str(traceback.format_exc()))
            return 1
    elif mode == CMD_LIST_BASE:
        dbconn = get_database()
        basevm_list = dbconn.list_item(BaseVM)
        sys.stdout.write("hash value" + "\t\t\t\t\t" + "path\n")
        sys.stdout.write("-"*90 + "\n")
        for item in basevm_list:
            sys.stdout.write(item.hash_value + "\t" + item.disk_path + "\n")
        sys.stdout.write("-"*90 + "\n")
    elif mode == CMD_ADD_BASE:
        dbconn = get_database()

        if len(left_args) < 2:
            sys.stderr.write("Add existing base vm requires: \n \
                    1) base path\n \
                    2) hash value of the base\n \
                    Ex) ./cloudlet add_base /path/to/base_disk.img 4304c473a9f98480c7d6387f01158881d3440bb81c8a9452b1abdef794e51111\n")
            return 1
        basedisk_path = os.path.abspath(left_args[0])
        base_hashvalue = left_args[1]
        if not os.path.isfile(basedisk_path):
            LOG.error("Not valid file: %s\n" % basedisk_path)
            return 1

        new_basevm = BaseVM(basedisk_path, base_hashvalue)
        dbconn.add_item(new_basevm)
    elif mode == CMD_DEL_BASE:
        dbconn = get_database()
        if len(left_args) < 1:
            sys.stderr.write("delete base vm requires base path\n \
                    Ex) ./cloudlet del_base /path/to/base_disk.img \n")
            return 1
        deleting_base = PackagingUtil._get_matching_basevm(left_args[0])
        if deleting_base != None:
            dbconn.del_item(deleting_base)
        else: 
            LOG.error("Cannot find matching base disk\n")
            return 1
    elif mode == CMD_IMPORT_BASE:
        if len(left_args) < 1:
            sys.stderr.write("import base vm requires 1) path to the exported file\n" +
                    "Ex) ./cloudlet import-base /path/to/base_disk.img\n")
            return 1
        import_file = os.path.abspath(left_args[0])
        if os.path.exists(import_file) == False or \
                os.access(import_file, os.R_OK) == False:
            msg = "Cannot access file: %s" % import_file
            LOG.error(msg)
            return 1
        PackagingUtil.import_basevm(import_file)
    elif mode == CMD_EXPORT_BASE:
        if len(left_args) < 2:
            sys.stderr.write("export base vm requires 1) base path 2) name of base VM\n" +
                    "Ex) ./cloudlet export-base /path/to/base_disk.img Ubuntu-12.04-i686 \n")
            return 1
        basedisk_path = left_args[0]
        matching_basevm = PackagingUtil._get_matching_basevm(basedisk_path)
        name = str(left_args[1])
        if matching_basevm != None:
            from cloudlet.package import PackagingUtil
            PackagingUtil.export_basevm(name, basedisk_path, matching_basevm.hash_value)
        else: 
            LOG.error("Cannot find matching base disk\n")
            return 1
    elif mode == CMD_LIST_SESSION:
        dbconn = get_database()
        session_list = dbconn.list_item(Session)
        sys.stdout.write("session_id\t\tassociated_time\t\t\tdisassociated_time\t\tstatus\n")
        sys.stdout.write("-"*95 + "\n")
        for item in session_list:
            sys.stdout.write(str(item) + "\n")
        sys.stdout.write("-"*95 + "\n")
    elif mode == CMD_CLEAR_SESSION:
        dbconn = get_database()
        session_list = dbconn.list_item(Session)
        for item in session_list:
            dbconn.session.delete(item)
        dbconn.session.commit()
    elif mode == CMD_LIST_OVERLAY:
        dbconn = get_database()
        overlay_list = dbconn.list_item(OverlayVM)
        sys.stdout.write("id\tsession_id\t\tbasevm_path\t\t\t\t\t\tstatus\n")
        sys.stdout.write("-"*95 + "\n")
        for item in overlay_list:
            sys.stdout.write(str(item) + "\n")
        sys.stdout.write("-"*95 + "\n")
    else:
        sys.stdout.write("Invalid command: %s\n" % mode)
        return 1

    return 0

if __name__ == "__main__":
    status = main(sys.argv)
    sys.exit(status)
