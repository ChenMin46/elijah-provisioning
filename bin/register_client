#!/usr/bin/env python 
#
# Cloudlet Infrastructure for Mobile Computing
#
#   Author: Kiryong Ha <krha@cmu.edu>
#
#   Copyright (C) 2011-2013 Carnegie Mellon University
#   Licensed under the Apache License, Version 2.0 (the "License");
#   you may not use this file except in compliance with the License.
#   You may obtain a copy of the License at
#
#       http://www.apache.org/licenses/LICENSE-2.0
#
#   Unless required by applicable law or agreed to in writing, software
#   distributed under the License is distributed on an "AS IS" BASIS,
#   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
#   See the License for the specific language governing permissions and
#   limitations under the License.
#

import sys
import time
sys.path.insert(0, "../src/")
from optparse import OptionParser

from cloudlet.discovery.ds_register import RegisterThread
from cloudlet.discovery.ds_register import RegisterError
from cloudlet.discovery.monitor import resource
from cloudlet.discovery.monitor.resource import ResourceMonitorError
from cloudlet import log as logging
from cloudlet.Configuration import Const as CloudletConst
from cloudlet.discovery.Const import DiscoveryConst as DiscoveryConst

from flask import Flask
from flask.ext import restful
from cloudlet.discovery.discovery_rest import ResourceInfo
from cloudlet.discovery.discovery_rest import CacheInfo


LOG = logging.getLogger(__name__)
UPDATE_PERIOD = 30  # update information for every 30 seconds


def process_command_line(argv):
    USAGE = "$ %prog [registration_server_name] [option]\n"
    USAGE += "  Example) $ %prog http://register.findcloudlet.org\n"
    VERSION = 'cloudlet registration tool: %s' % CloudletConst.VERSION
    DESCRIPTION = "Register Cloudlet to a central server for discovery purpose"
    parser = OptionParser(usage=USAGE,
            version=VERSION,
            description=DESCRIPTION)

    parser.add_option(
            '-i', '--rest_ip', action='store', type='string', dest='rest_ip', \
            default=None, help="Manually set cloudlet rest server's IP address")
    parser.add_option(
            '-p', '--rest_port', action='store', type='int', \
            dest='rest_port', default=DiscoveryConst.REST_API_PORT, \
            help="Manually set rest port number")
    parser.add_option(
            '-a', '--latitude', action='store', type='string', dest='latitude', \
            default=None, help="Manually set cloudlet's latitude")
    parser.add_option(
            '-o', '--longitude', action='store', type='string', dest='longitude',
            default=None, help="Manually set cloudlet's longitude")
    parser.add_option('-d',
            dest='daemonize', action='store_false', default=True,
            help='do not run as a daemon')

    settings, args = parser.parse_args(argv)
    if len(args) != 1:
        parser.error("Need URL for registration server")

    register_server = str(args[0]).lower()
    return register_server, settings


def main(argv):
    register_server, settings = process_command_line(sys.argv[1:])
    resource_monitor = None
    register_client = None
    ret_code = 0

    try:
        # cloudlet machine monitor
        LOG.info("Start resource monitoring")
        resource_monitor = resource.get_instance()
        resource_monitor.start()

        # Start registration client
        register_client = RegisterThread(register_server, resource_monitor,
                update_period=UPDATE_PERIOD, cloudlet_ip=settings.rest_ip,
                cloudlet_rest_port=settings.rest_port,
                latitude=settings.latitude, longitude=settings.longitude)
        register_client.start()

        # discover rest API
        app = Flask(__name__)
        api = restful.Api(app)
        api.add_resource(ResourceInfo, '/api/v1/resource/')
        api.add_resource(CacheInfo, '/api/v1/resource/<string:app_id>')
        # do no turn on debug mode. it make a mess for graceful terminate
        LOG.info("Start RESTful API Server at %d" % (settings.rest_port))
        app.run(host="0.0.0.0", port=DiscoveryConst.REST_API_PORT)

    except ResourceMonitorError as e:
        LOG.info(str(e))
        LOG.error("Cannot register Cloudlet to central server\n")
        ret_code = 1
    except RegisterError as e:
        LOG.warning(str(e))
        LOG.warning("Cannot register Cloudlet to %s" % (register_server))
        ret_code = 1
    except KeyboardInterrupt as e:
        LOG.warning("User exists")
        ret_code = 1
    finally:
        if resource_monitor is not None:
            resource_monitor.terminate()
        if register_client is not None:
            register_client.terminate()
    return ret_code



if __name__ == "__main__":
    status = main(sys.argv)
    sys.exit(status)
